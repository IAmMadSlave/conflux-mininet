/**
 * \file ssfnet_stats.h
 * \brief Header file for collecting system-wide simulation statistics.
 * \author Rong Rong
 * 
 * Copyright (c) 2011 Florida International University.
 *
 * Permission is hereby granted, free of charge, to any individual or
 * institution obtaining a copy of this software and associated
 * documentation files (the "software"), to use, copy, modify, and
 * distribute without restriction.
 *
 * The software is provided "as is", without warranty of any kind,
 * express or implied, including but not limited to the warranties of
 * merchantability, fitness for a particular purpose and
 * non-infringement.  In no event shall Florida International
 * University be liable for any claim, damages or other liability,
 * whether in an action of contract, tort or otherwise, arising from,
 * out of or in connection with the software or the use or other
 * dealings in the software.
 *
 * This software is developed and maintained by
 *
 *   Modeling and Networking Systems Research Group
 *   School of Computing and Information Sciences
 *   Florida International University
 *   Miami, Florida 33199, USA
 *
 * You can find our research at http://www.primessf.net/.
 */

#ifndef __SSFNET_STATS_H__
#define __SSFNET_STATS_H__

#include "primex_config.h" // global configuration generated by autoconf
#include "os/ssfnet_types.h"
#include "os/timer.h"
#include "net/interface.h"
#include "os/community.h"

using namespace prime::ssf;
namespace prime {
namespace ssfnet {
class SimulationSamplingTimer : public prime::ssfnet::Timer{
public:
	typedef SSFNET_MAP(SSFNET_STRING, Interface*) nameMap;
	typedef SSFNET_PAIR(Interface*, int) ifaceToBytes;
	typedef SSFNET_LIST(ifaceToBytes) interfaces;
	typedef SSFNET_MAP(string, interfaces) interfaceMap;

	SimulationSamplingTimer(Community* comm, double ltime, SSFNET_STRING downscale, SSFNET_STRING update);
	void resched(double delay);

protected:
	virtual void callback();

private:
	static void interfaceStats (interfaces& ifaces, double& path_loss, double& mu_starstar);
	double end_time;
	Community* comm_;
	SSFNET_STRING downscale_file;
	SSFNET_STRING update_file;
	interfaceMap pid_interfaces; //pipe_name <interface, last_bytes>

};

} // namespace ssfnet
} // namespace prime

#endif /*__SSFNET_H__*/
