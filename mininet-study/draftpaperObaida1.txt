What is a Traffic Portal? How is it implemented?
A traffic portal is implemented as an interface of a simulated router that allows real time network entities to  connect and to interact with a simulated network in real-time. 
A traffic portal consists of reader and writer, network packet capture and packet forwarding entities. In  general words, a packet capture tool (libpcap) is connected to a real interface visible to the kernel for capturing incoming packets and reporting to simulator. Once the packet is captured and inserted into simulator, the simulator would know what actions to take. If it recognizes the sender of the packet it will write out the packet to the appropriate interface applying the modeling specifications such as delay and BW of the link on the packet. If the destination is a simulated entity the portal will wait on the simulator to perform appropriate action and will write out to the portal interface using the writer if a response is available. If the packet comes from a unrecognized network, it gets dropped before entering simulation. A traffic portal is associated with a network, reachable from the simulator. 




We propose three different techniques to surpass the scalability limits of mininet while allowing the freedom of using existing mininet paradigm. 


Proposed MPI Based Architecture:
Our first proposed technique is motivated by parallel real-timme simulation using Message Passing Interface (MPI) synchronization. In this case, a Minient Conflux experiment is a parallel real time simulation allowing integration of mininet topologies at desirable traffic portal interfaces of the simulated routers. Inside the simulation all of the simulated elements are assigned IP's from a same network address space. The simulated model is further split to run on a set of available physical hosts maintaining original connectivity constructs. Each of the simulator instances are capable of interfacing with as many mininet network topologies we want to put together. If the original Mininet topology that would be run on a physical host consists multiple disconnected topologies, they must be connected to separate interfaces of the simulator with a distinct network address space. This is for the convenience of the simulator to identify reachable network through each real time traffic portal interfaces. 



Figure: Architecture of MPI




Figure: UDP and TCP throughput results for different MPI synchronization window




Proposed Distributed Real-Time Simulation Architecture:
Fundamentally a pure simulatation of a network model is  computation intensive. Todays multicore high end home pc cpu's are capable of computing at a rate more than 100gflops[intelFlop]. However this number falls short when it comes to simulating a network of several millions of nodes with with a real traffic pattern. To overcome this computational limitation different fluid based traffic approximation [fluidRed] techniques were applied. In addition Parallel simulation [refParallel]  techniques are widely used to distribute the computation load across the available resources. Most of the popular parallel simulators user Message Passing Interface (MPI) like mechanism to synchronize simulation instances which introduces a new set of problem to the simulation. Each of the remote calls thereby interrupts another running instance slowing down the simulator performance significantly.
Real time parallel simulation [PRIME] techniques were successfully applied  on hybrid network setup consisting of simulation and emulation to improve the realism of simulation results while maintaining scalability of experimentation nonetheless these techniques heavily rely on MPI like synchronization and rooting similar problems.
Our second technique we propose is motivated by distributited real-time simulation requiring no synchronization. In this architecture each physical host runs a independent instance of the simulator that can interface with several Mininet topology. This architectural improvement not only liberates from burden of MPI synchronization but also allows the provides the freedom of having different networks address space for all the simulated instances.  






Figure: Architecture of Real-Time Distributed Simulation with Mininet




Results(?):
Our investigation shows significant throughput gain compared to MPI implementation. 






Amortized Distributed Real-Time Simulation Architecture:
Our last proposed technique is to tackle with the the challenges introduced by per packet processing. For a large number of packets, the penalty of crossing the simulation would be significantly high due to the overhead associated with switching context. It also throttles the AIMD behavior of tcp and provide a means for the high bandwidth delay products in the network. Since the traffic inserted into simulator is incoming traffic from real interfaces, its not desirabe to expect traffic following a pattern from that interface. But we can manage the simulator to do less per packet processing thereby amortizing cost of processing to a significantly lower number given that we have large enough buffer to store the incoming packets. Since multiple Mininet instance can be hooked with each of the simulator instances the batching of packets will be independent for each interface. Batching technique can be applied to achieve different objectives such as increased throughput, lower CPU utilization, etc. Consequently batching can be applied for reading from and writing to interface to achieve different per packet processing goals. We implemented timed batching. Count based and packet length based batching are also viable ideas for network with faster interconnections. 













Reference 

[intelFlop]
IntelÂ® Core i7-3900 Desktop Processor Series  http://download.intel.com/support/processors/corei7/sb/core_i7-3900_d.pdf

[liuFluid]